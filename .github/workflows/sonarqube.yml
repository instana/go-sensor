name: Generate SonarQube report
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Run analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run coverage commands
        run: |
            #!/bin/bash

            echo "starting postgres"
            sudo systemctl start postgresql.service
            sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'mysecretpassword'"
            echo "after starting postgres"

            go test -v -coverpkg=./... -cover -covermode atomic -coverprofile coverage.out ./... -json > coverage.json && ls cover*

            LIB_LIST=$(find ./instrumentation -name go.mod -exec dirname {} \;)

            PPWWDD=$(echo "$PWD")

            echo "will attempt to cover instapgx"
            cd ./instrumentation/instapgx
            echo "will attempt to test integrtion instapgx"
            go test -v -tags=integration ./...
            go mod tidy || echo "failed on mod tidy"
            go test -v -tags=integration -coverpkg=./... -cover -covermode atomic -coverprofile coverage.out ./... -json > coverage.json || echo "fail on go test"
            cd ../../
            echo "after attempt to cover instapgx"

            echo "current directory is $PWD"

            cd $PPWWDD

            for lib in $LIB_LIST
              do cd "$lib" && go mod tidy && go test -v -coverpkg=./... -cover -covermode atomic -coverprofile coverage.out ./... -json > coverage.json && cd -;
            done

      - name: Sonarqube Scan
        uses: sonarsource/sonarqube-scan-action@master

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
