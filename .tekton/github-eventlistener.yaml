# (c) Copyright IBM Corp. 2024

apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: github-pipeline-template
spec:
  params:
    - description: The git branch name
      name: git-branch
    - description: The git branch name shortened and converted to RFC 1123 subdomain names
      name: git-branch-normalized
    - description: The full sha of the git commit
      name: git-commit-sha
    - description: The short 7 digit sha of the git commit
      name: git-commit-short-sha
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        # After variable resolution, this has to be maximum 63 character long,
        # lower case, RFC 1123 subdomain name. The regex used for validation is
        # '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*'
        name: $(tt.params.git-branch-normalized)-go22-$(tt.params.git-commit-short-sha)
      spec:
        params:
        - name: revision
          value: $(tt.params.git-branch)
        - name: git-commit-sha
          value: $(tt.params.git-commit-sha)
        - name: go-version
          value: "1.22"
        - name: excludeDirs
          value: ""
        pipelineRef:
          name: go-tracer-ci-pipeline
        workspaces:
        - name: go-tracer-ci-pipeline-pvc
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        - name: cache-pvc
          persistentVolumeClaim:
            claimName: cache-pvc

    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        name: $(tt.params.git-branch-normalized)-go21-$(tt.params.git-commit-short-sha)
      spec:
        params:
        - name: revision
          value: $(tt.params.git-branch)
        - name: git-commit-sha
          value: $(tt.params.git-commit-sha)
        - name: go-version
          value: "1.21"
        - name: excludeDirs
          value: ""
        pipelineRef:
          name: go-tracer-ci-pipeline
        workspaces:
        - name: go-tracer-ci-pipeline-pvc
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        - name: cache-pvc
          persistentVolumeClaim:
            claimName: cache-pvc

---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-pr-binding
spec:
  params:
    - name: git-branch
      value: $(body.pull_request.head.ref)
    - name: git-branch-normalized
      value: $(extensions.git_branch_normalized)
    - name: git-commit-sha
      value: $(body.pull_request.head.sha)
    - name: git-commit-short-sha
      value: $(extensions.truncated_sha)

---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-push-binding
spec:
  params:
    - name: git-branch
      value: $(extensions.git_branch)
    - name: git-branch-normalized
      value: $(extensions.git_branch_normalized)
    - name: git-commit-sha
      value: $(body.head_commit.id)
    - name: git-commit-short-sha
      value: $(extensions.truncated_sha)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: github-pr-eventlistener
spec:
  serviceAccountName: tekton-triggers-eventlistener-serviceaccount
  triggers:
    - name: github-pr-trigger
      interceptors:
        - name: receive-github-event
          ref:
            name: "github"
          params:
            - name: "secretRef"
              value:
                secretName: github-interceptor-secret
                secretKey: secretToken
            - name: "eventTypes"
              value: ["pull_request"]
        - name: filter-and-modify
          ref:
            name: "cel"
          params:
            - name: "filter"
              # We should not trigger on 'closed', 'assigned', 'unassigned', 'converted_to_draft'
              value: "body.action in ['opened', 'synchronize', 'reopened', 'labeled', 'unlabeled'] && body.pull_request.labels.exists(label, label.name == 'tekton_ci')"
            - name: "overlays"
              value:
              - key: truncated_sha
                expression: "body.pull_request.head.sha.truncate(7)"
              - key: git_branch_normalized
                # The git branch name shortened and converted to RFC 1123 subdomain names
                expression: 'body.pull_request.head.ref.truncate(32).lowerAscii().translate("_", "-").translate("/", "-").translate("\\.", "-")'
      bindings:
        - ref: github-pr-binding
      template:
        ref: github-pipeline-template
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: github-push-eventlistener
spec:
  serviceAccountName: tekton-triggers-eventlistener-serviceaccount
  triggers:
    - name: github-push-trigger
      interceptors:
        - name: receive-github-push-event
          ref:
            name: "github"
          params:
            - name: "secretRef"
              value:
                secretName: github-interceptor-secret
                secretKey: secretToken
            - name: "eventTypes"
              value: ["push"]
        - name: filter-and-modify
          ref:
            name: "cel"
          params:
            - name: "filter"
              # We should trigger on push to main branch only
              value: "body.ref in ['refs/heads/main']"
            - name: "overlays"
              value:
              - key: truncated_sha
                expression: "body.head_commit.id.truncate(7)"
              - key: git_branch
                expression: 'body.ref.translate("refs/heads/", "")'
              - key: git_branch_normalized
                # The git branch name shortened and converted to RFC 1123 subdomain names
                expression: 'body.ref.translate("refs/heads/", "").truncate(32).lowerAscii().translate("_", "-").translate("/", "-")'
      bindings:
        - ref: github-push-binding
      template:
        ref: github-pipeline-template
